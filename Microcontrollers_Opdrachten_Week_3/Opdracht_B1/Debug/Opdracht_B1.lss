
Opdracht_B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d46  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ec  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ef d0       	rcall	.+478    	; 0x288 <main>
  aa:	2d c1       	rjmp	.+602    	; 0x306 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_strobe_lcd_e>:
	lcd_strobe_lcd_e();
}

void set_cursor(int position)
{
	write_command(128 + position);
  ae:	ab 9a       	sbi	0x15, 3	; 21
  b0:	8f e9       	ldi	r24, 0x9F	; 159
  b2:	9f e0       	ldi	r25, 0x0F	; 15
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_strobe_lcd_e+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_strobe_lcd_e+0xc>
  ba:	00 00       	nop
  bc:	ab 98       	cbi	0x15, 3	; 21
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x1a>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <init>:
  cc:	cf 93       	push	r28
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	c0 e2       	ldi	r28, 0x20	; 32
  d6:	c5 bb       	out	0x15, r28	; 21
  d8:	ea df       	rcall	.-44     	; 0xae <lcd_strobe_lcd_e>
  da:	c5 bb       	out	0x15, r28	; 21
  dc:	e8 df       	rcall	.-48     	; 0xae <lcd_strobe_lcd_e>
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	e5 df       	rcall	.-54     	; 0xae <lcd_strobe_lcd_e>
  e4:	15 ba       	out	0x15, r1	; 21
  e6:	e3 df       	rcall	.-58     	; 0xae <lcd_strobe_lcd_e>
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e0 df       	rcall	.-64     	; 0xae <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	de df       	rcall	.-68     	; 0xae <lcd_strobe_lcd_e>
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	db df       	rcall	.-74     	; 0xae <lcd_strobe_lcd_e>
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	d9 df       	rcall	.-78     	; 0xae <lcd_strobe_lcd_e>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 bb       	out	0x15, r24	; 21
 100:	d6 df       	rcall	.-84     	; 0xae <lcd_strobe_lcd_e>
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <write_command>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	aa 98       	cbi	0x15, 2	; 21
 10e:	cf df       	rcall	.-98     	; 0xae <lcd_strobe_lcd_e>
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
 116:	aa 98       	cbi	0x15, 2	; 21
 118:	ca df       	rcall	.-108    	; 0xae <lcd_strobe_lcd_e>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <write_data>:
	lcd_strobe_lcd_e();
}


void write_data(unsigned char byte)
{
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	PORTC = byte;
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 124:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 126:	c3 df       	rcall	.-122    	; 0xae <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 12e:	aa 9a       	sbi	0x15, 2	; 21
 130:	be df       	rcall	.-132    	; 0xae <lcd_strobe_lcd_e>
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <display_text>:


void display_text(char *str)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	for(;*str; str++){
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <display_text+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
		write_data(*str);
 144:	ec df       	rcall	.-40     	; 0x11e <write_data>
}


void display_text(char *str)
{
	for(;*str; str++){
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <display_text+0xe>
		write_data(*str);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <clear_text>:

void clear_text()
{
	write_command(0x01);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	d8 cf       	rjmp	.-80     	; 0x106 <write_command>
 156:	08 95       	ret

00000158 <wait>:
}

void wait( int ms ) 
{
	for (int i = 0; i < ms; i++) 
 158:	18 16       	cp	r1, r24
 15a:	19 06       	cpc	r1, r25
 15c:	6c f4       	brge	.+26     	; 0x178 <wait+0x20>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	ef e9       	ldi	r30, 0x9F	; 159
 164:	ff e0       	ldi	r31, 0x0F	; 15
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <wait+0xe>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <wait+0x14>
 16c:	00 00       	nop
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	82 17       	cp	r24, r18
 174:	93 07       	cpc	r25, r19
 176:	a9 f7       	brne	.-22     	; 0x162 <wait+0xa>
 178:	08 95       	ret

0000017a <setupTimer>:
		_delay_ms( 1 );
}

void setupTimer(void) {

	cli();
 17a:	f8 94       	cli

	TCCR1A = 0;
 17c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 17e:	1e bc       	out	0x2e, r1	; 46
	TCNT1  = 0;
 180:	1d bc       	out	0x2d, r1	; 45
 182:	1c bc       	out	0x2c, r1	; 44
	
	OCR1A = 100;
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9b bd       	out	0x2b, r25	; 43
 18a:	8a bd       	out	0x2a, r24	; 42
	
	TCCR1B |= (1 << WGM12);
 18c:	8e b5       	in	r24, 0x2e	; 46
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS12) | (1 << CS10);
 192:	8e b5       	in	r24, 0x2e	; 46
 194:	85 60       	ori	r24, 0x05	; 5
 196:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 198:	87 b7       	in	r24, 0x37	; 55
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	87 bf       	out	0x37, r24	; 55

	sei();
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <__vector_12>:
}

ISR(TIMER1_COMPA_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	25 97       	sbiw	r28, 0x05	; 5
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	cd bf       	out	0x3d, r28	; 61
	//PORTB ^= (1<<7);
	if(PINA & 0x01)
 1d6:	c8 9b       	sbis	0x19, 0	; 25
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <__vector_12+0x7e>
	{
		if(isDown == 0)
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	89 2b       	or	r24, r25
 1e4:	a1 f5       	brne	.+104    	; 0x24e <__vector_12+0xac>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1e6:	4a e0       	ldi	r20, 0x0A	; 10
 1e8:	be 01       	movw	r22, r28
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buttonCount>
 1f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <buttonCount+0x1>
 1f6:	54 d0       	rcall	.+168    	; 0x2a0 <__itoa_ncheck>
		{
			char snum[5];
			itoa(buttonCount, snum, 10);
			clear_text();
 1f8:	ac df       	rcall	.-168    	; 0x152 <clear_text>
 1fa:	ce 01       	movw	r24, r28
			display_text(snum);
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	9b df       	rcall	.-202    	; 0x136 <display_text>
 200:	81 e0       	ldi	r24, 0x01	; 1
			isDown = 1;
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buttonCount>
			buttonCount++;	
 210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <buttonCount+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <buttonCount+0x1>
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <buttonCount>
 21e:	17 c0       	rjmp	.+46     	; 0x24e <__vector_12+0xac>
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	else
	{
		if(isDown == 1)
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	89 f4       	brne	.+34     	; 0x24e <__vector_12+0xac>
 22c:	4a e0       	ldi	r20, 0x0A	; 10
 22e:	be 01       	movw	r22, r28
 230:	6f 5f       	subi	r22, 0xFF	; 255
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buttonCount>
 238:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <buttonCount+0x1>
 23c:	31 d0       	rcall	.+98     	; 0x2a0 <__itoa_ncheck>
		{
			char snum[5];
			itoa(buttonCount, snum, 10);
			clear_text();
 23e:	89 df       	rcall	.-238    	; 0x152 <clear_text>
 240:	ce 01       	movw	r24, r28
			display_text(snum);
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	78 df       	rcall	.-272    	; 0x136 <display_text>
 246:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			isDown = 0;
 24a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <buttonCount>
		}
	}
	PORTB = buttonCount;
 252:	88 bb       	out	0x18, r24	; 24
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0b be       	out	0x3b, r0	; 59
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <main>:
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	87 bb       	out	0x17, r24	; 23


int main(void) 
{
	DDRB = 0xFF;
	DDRA = 0x00;
 28c:	1a ba       	out	0x1a, r1	; 26
	
	//---- LCD ----
	DDRD = 0xFF;
 28e:	81 bb       	out	0x11, r24	; 17
	init();
 290:	1d df       	rcall	.-454    	; 0xcc <init>
	lcd_strobe_lcd_e();
}

void set_cursor(int position)
{
	write_command(128 + position);
 292:	80 e8       	ldi	r24, 0x80	; 128
	DDRD = 0xFF;
	init();
	set_cursor(0);
	//-------------
	
	setupTimer();
 294:	38 df       	rcall	.-400    	; 0x106 <write_command>
	while (1)  {
		wait(50);
 296:	71 df       	rcall	.-286    	; 0x17a <setupTimer>
 298:	82 e3       	ldi	r24, 0x32	; 50
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	5d df       	rcall	.-326    	; 0x158 <wait>
 29e:	fc cf       	rjmp	.-8      	; 0x298 <main+0x10>

000002a0 <__itoa_ncheck>:
 2a0:	bb 27       	eor	r27, r27
 2a2:	4a 30       	cpi	r20, 0x0A	; 10
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <__itoa_ncheck+0x12>
 2a6:	99 23       	and	r25, r25
 2a8:	22 f4       	brpl	.+8      	; 0x2b2 <__itoa_ncheck+0x12>
 2aa:	bd e2       	ldi	r27, 0x2D	; 45
 2ac:	90 95       	com	r25
 2ae:	81 95       	neg	r24
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <__utoa_common>

000002b4 <__utoa_ncheck>:
 2b4:	bb 27       	eor	r27, r27

000002b6 <__utoa_common>:
 2b6:	fb 01       	movw	r30, r22
 2b8:	55 27       	eor	r21, r21
 2ba:	aa 27       	eor	r26, r26
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	aa 1f       	adc	r26, r26
 2c2:	a4 17       	cp	r26, r20
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__utoa_common+0x14>
 2c6:	a4 1b       	sub	r26, r20
 2c8:	83 95       	inc	r24
 2ca:	50 51       	subi	r21, 0x10	; 16
 2cc:	b9 f7       	brne	.-18     	; 0x2bc <__utoa_common+0x6>
 2ce:	a0 5d       	subi	r26, 0xD0	; 208
 2d0:	aa 33       	cpi	r26, 0x3A	; 58
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <__utoa_common+0x20>
 2d4:	a9 5d       	subi	r26, 0xD9	; 217
 2d6:	a1 93       	st	Z+, r26
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	79 f7       	brne	.-34     	; 0x2ba <__utoa_common+0x4>
 2dc:	b1 11       	cpse	r27, r1
 2de:	b1 93       	st	Z+, r27
 2e0:	11 92       	st	Z+, r1
 2e2:	cb 01       	movw	r24, r22
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
