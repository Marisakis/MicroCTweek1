
Opdracht_C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a8  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000937  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fd  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052e  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000577  00000000  00000000  00002c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	5e d1       	rcall	.+700    	; 0x356 <main>
  9a:	fe c1       	rjmp	.+1020   	; 0x498 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <displayDriverInit>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e7 df       	rcall	.-50     	; 0xd6 <spi_slaveSelect>
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	e1 df       	rcall	.-62     	; 0xce <spi_write>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	df df       	rcall	.-66     	; 0xce <spi_write>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	ed df       	rcall	.-38     	; 0xee <spi_slaveDeSelect>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	df df       	rcall	.-66     	; 0xd6 <spi_slaveSelect>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	d9 df       	rcall	.-78     	; 0xce <spi_write>
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	d7 df       	rcall	.-82     	; 0xce <spi_write>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e5 df       	rcall	.-54     	; 0xee <spi_slaveDeSelect>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	d7 df       	rcall	.-82     	; 0xd6 <spi_slaveSelect>
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	d1 df       	rcall	.-94     	; 0xce <spi_write>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	cf df       	rcall	.-98     	; 0xce <spi_write>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	dd df       	rcall	.-70     	; 0xee <spi_slaveDeSelect>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	cf df       	rcall	.-98     	; 0xd6 <spi_slaveSelect>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	c9 df       	rcall	.-110    	; 0xce <spi_write>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	c7 df       	rcall	.-114    	; 0xce <spi_write>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	d5 cf       	rjmp	.-86     	; 0xee <spi_slaveDeSelect>
 144:	08 95       	ret

00000146 <spi_writeWord>:
}

// Write value [data] to a single segment with address [address]
void spi_writeWord(unsigned char address, unsigned char data)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	d8 2f       	mov	r29, r24
 14c:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	c2 df       	rcall	.-124    	; 0xd6 <spi_slaveSelect>
	spi_write(address); // digit adress: (digit place)
 152:	8d 2f       	mov	r24, r29
 154:	bc df       	rcall	.-136    	; 0xce <spi_write>
	spi_write(data); // digit value: 0
 156:	8c 2f       	mov	r24, r28
 158:	ba df       	rcall	.-140    	; 0xce <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	c8 df       	rcall	.-112    	; 0xee <spi_slaveDeSelect>
 15e:	df 91       	pop	r29
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <getDigitCount>:
 164:	18 16       	cp	r1, r24

// Returns the number of digits in the value given
int getDigitCount(int value)
{	
	int count = 0;
	while(value > 0)
 166:	19 06       	cpc	r1, r25
 168:	6c f4       	brge	.+26     	; 0x184 <getDigitCount+0x20>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
	{
		value /= 10;
 16e:	ea e0       	ldi	r30, 0x0A	; 10
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	bf 01       	movw	r22, r30
 174:	2d d1       	rcall	.+602    	; 0x3d0 <__divmodhi4>
 176:	cb 01       	movw	r24, r22
		count++;
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255

// Returns the number of digits in the value given
int getDigitCount(int value)
{	
	int count = 0;
	while(value > 0)
 17c:	18 16       	cp	r1, r24
 17e:	19 06       	cpc	r1, r25
 180:	c4 f3       	brlt	.-16     	; 0x172 <getDigitCount+0xe>
 182:	02 c0       	rjmp	.+4      	; 0x188 <getDigitCount+0x24>
}

// Returns the number of digits in the value given
int getDigitCount(int value)
{	
	int count = 0;
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
	{
		value /= 10;
		count++;
	}
	return count;
}
 188:	c9 01       	movw	r24, r18
 18a:	08 95       	ret

0000018c <writeLedDisplayA>:

// Write value of only positive value to display
void writeLedDisplayA(int value)
{
 18c:	7f 92       	push	r7
 18e:	8f 92       	push	r8
 190:	9f 92       	push	r9
 192:	af 92       	push	r10
 194:	bf 92       	push	r11
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	8c 01       	movw	r16, r24
	for(int i = 0; i < numberCount; i++)
	{
		spi_writeWord(currentAddress, num[i]);
		currentAddress--;
	}
}
 1ac:	cd b6       	in	r12, 0x3d	; 61
 1ae:	de b6       	in	r13, 0x3e	; 62
	return count;
}

// Write value of only positive value to display
void writeLedDisplayA(int value)
{
 1b0:	ad b6       	in	r10, 0x3d	; 61
 1b2:	be b6       	in	r11, 0x3e	; 62
	if(value < 0 || value > 9999)
 1b4:	00 31       	cpi	r16, 0x10	; 16
 1b6:	87 e2       	ldi	r24, 0x27	; 39
 1b8:	18 07       	cpc	r17, r24
 1ba:	c8 f5       	brcc	.+114    	; 0x22e <writeLedDisplayA+0xa2>
		return;
	
	int numberCount = getDigitCount(value);
 1bc:	c8 01       	movw	r24, r16
 1be:	d2 df       	rcall	.-92     	; 0x164 <getDigitCount>
 1c0:	7c 01       	movw	r14, r24
	char num[numberCount];
 1c2:	ed b7       	in	r30, 0x3d	; 61
 1c4:	fe b7       	in	r31, 0x3e	; 62
 1c6:	e8 1b       	sub	r30, r24
 1c8:	f9 0b       	sbc	r31, r25
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	fe bf       	out	0x3e, r31	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	ed bf       	out	0x3d, r30	; 61
 1d4:	8d b7       	in	r24, 0x3d	; 61
 1d6:	9e b7       	in	r25, 0x3e	; 62
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	4c 01       	movw	r8, r24
	itoa(value, num, 10);
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	bc 01       	movw	r22, r24
 1e2:	c8 01       	movw	r24, r16
 1e4:	1c d1       	rcall	.+568    	; 0x41e <itoa>
	
	int currentAddress = numberCount;
	for(int i = 4; i >= numberCount; i--)
 1e6:	95 e0       	ldi	r25, 0x05	; 5
 1e8:	e9 16       	cp	r14, r25
 1ea:	f1 04       	cpc	r15, r1
 1ec:	54 f4       	brge	.+20     	; 0x202 <writeLedDisplayA+0x76>
 1ee:	04 e0       	ldi	r16, 0x04	; 4
 1f0:	10 e0       	ldi	r17, 0x00	; 0
		spi_writeWord(i, 15);
 1f2:	6f e0       	ldi	r22, 0x0F	; 15
 1f4:	80 2f       	mov	r24, r16
 1f6:	a7 df       	rcall	.-178    	; 0x146 <spi_writeWord>
	int numberCount = getDigitCount(value);
	char num[numberCount];
	itoa(value, num, 10);
	
	int currentAddress = numberCount;
	for(int i = 4; i >= numberCount; i--)
 1f8:	01 50       	subi	r16, 0x01	; 1
 1fa:	11 09       	sbc	r17, r1
 1fc:	0e 15       	cp	r16, r14
 1fe:	1f 05       	cpc	r17, r15
 200:	c4 f7       	brge	.-16     	; 0x1f2 <writeLedDisplayA+0x66>
		spi_writeWord(i, 15);
	for(int i = 0; i < numberCount; i++)
 202:	1e 14       	cp	r1, r14
 204:	1f 04       	cpc	r1, r15
 206:	6c f4       	brge	.+26     	; 0x222 <writeLedDisplayA+0x96>
 208:	84 01       	movw	r16, r8
 20a:	7e 2c       	mov	r7, r14
 20c:	e8 0c       	add	r14, r8
 20e:	f9 1c       	adc	r15, r9
	{
		spi_writeWord(currentAddress, num[i]);
 210:	f8 01       	movw	r30, r16
 212:	61 91       	ld	r22, Z+
 214:	8f 01       	movw	r16, r30
 216:	87 2d       	mov	r24, r7
 218:	96 df       	rcall	.-212    	; 0x146 <spi_writeWord>
 21a:	7a 94       	dec	r7
	itoa(value, num, 10);
	
	int currentAddress = numberCount;
	for(int i = 4; i >= numberCount; i--)
		spi_writeWord(i, 15);
	for(int i = 0; i < numberCount; i++)
 21c:	e0 16       	cp	r14, r16
 21e:	f1 06       	cpc	r15, r17
 220:	b9 f7       	brne	.-18     	; 0x210 <writeLedDisplayA+0x84>
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	be be       	out	0x3e, r11	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	ad be       	out	0x3d, r10	; 61
 22c:	05 c0       	rjmp	.+10     	; 0x238 <writeLedDisplayA+0xac>

// Write value of only positive value to display
void writeLedDisplayA(int value)
{
	if(value < 0 || value > 9999)
		return;
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de be       	out	0x3e, r13	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd be       	out	0x3d, r12	; 61
	for(int i = 0; i < numberCount; i++)
	{
		spi_writeWord(currentAddress, num[i]);
		currentAddress--;
	}
}
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de be       	out	0x3e, r13	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd be       	out	0x3d, r12	; 61
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	08 95       	ret

0000025e <writeLedDisplayB>:

// Write value of a negative or positive value to display
void writeLedDisplayB(int value)
{
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	6c 01       	movw	r12, r24
	for(int i = 0; i < numberCount; i++)
	{
		spi_writeWord(currentAddress, num[i]);
		currentAddress--;
	}
}
 280:	ad b6       	in	r10, 0x3d	; 61
 282:	be b6       	in	r11, 0x3e	; 62
	}
}

// Write value of a negative or positive value to display
void writeLedDisplayB(int value)
{
 284:	8d b6       	in	r8, 0x3d	; 61
 286:	9e b6       	in	r9, 0x3e	; 62
	if(value > 999 || value < -999)
 288:	89 51       	subi	r24, 0x19	; 25
 28a:	9c 4f       	sbci	r25, 0xFC	; 252
 28c:	8f 3c       	cpi	r24, 0xCF	; 207
 28e:	97 40       	sbci	r25, 0x07	; 7
 290:	08 f0       	brcs	.+2      	; 0x294 <writeLedDisplayB+0x36>
 292:	48 c0       	rjmp	.+144    	; 0x324 <writeLedDisplayB+0xc6>
		return;
	
	int numberCount = getDigitCount(abs(value));
 294:	86 01       	movw	r16, r12
 296:	dd 20       	and	r13, r13
 298:	24 f4       	brge	.+8      	; 0x2a2 <writeLedDisplayB+0x44>
 29a:	00 27       	eor	r16, r16
 29c:	11 27       	eor	r17, r17
 29e:	0c 19       	sub	r16, r12
 2a0:	1d 09       	sbc	r17, r13
 2a2:	c8 01       	movw	r24, r16
 2a4:	5f df       	rcall	.-322    	; 0x164 <getDigitCount>
 2a6:	7c 01       	movw	r14, r24
	char num[numberCount];
 2a8:	8d b7       	in	r24, 0x3d	; 61
 2aa:	9e b7       	in	r25, 0x3e	; 62
 2ac:	8e 19       	sub	r24, r14
 2ae:	9f 09       	sbc	r25, r15
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	9e bf       	out	0x3e, r25	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	8d bf       	out	0x3d, r24	; 61
 2ba:	ed b7       	in	r30, 0x3d	; 61
 2bc:	fe b7       	in	r31, 0x3e	; 62
 2be:	31 96       	adiw	r30, 0x01	; 1
 2c0:	3f 01       	movw	r6, r30
	itoa(abs(value), num, 10);
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	bf 01       	movw	r22, r30
 2c8:	c8 01       	movw	r24, r16
 2ca:	a9 d0       	rcall	.+338    	; 0x41e <itoa>
	
	for(int i = 4; i >= numberCount + 1; i--)
 2cc:	c7 01       	movw	r24, r14
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	05 97       	sbiw	r24, 0x05	; 5
 2d2:	54 f4       	brge	.+20     	; 0x2e8 <writeLedDisplayB+0x8a>
 2d4:	04 e0       	ldi	r16, 0x04	; 4
 2d6:	10 e0       	ldi	r17, 0x00	; 0
		spi_writeWord(i, 15);
 2d8:	6f e0       	ldi	r22, 0x0F	; 15
 2da:	80 2f       	mov	r24, r16
 2dc:	34 df       	rcall	.-408    	; 0x146 <spi_writeWord>
	
	int numberCount = getDigitCount(abs(value));
	char num[numberCount];
	itoa(abs(value), num, 10);
	
	for(int i = 4; i >= numberCount + 1; i--)
 2de:	01 50       	subi	r16, 0x01	; 1
 2e0:	11 09       	sbc	r17, r1
 2e2:	e0 16       	cp	r14, r16
 2e4:	f1 06       	cpc	r15, r17
 2e6:	c1 f7       	brne	.-16     	; 0x2d8 <writeLedDisplayB+0x7a>
		spi_writeWord(i, 15);
	spi_writeWord(numberCount + 1, (value < 0) ? 10 : 15);
 2e8:	dd 20       	and	r13, r13
 2ea:	14 f0       	brlt	.+4      	; 0x2f0 <writeLedDisplayB+0x92>
 2ec:	6f e0       	ldi	r22, 0x0F	; 15
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <writeLedDisplayB+0x94>
 2f0:	6a e0       	ldi	r22, 0x0A	; 10
 2f2:	de 2c       	mov	r13, r14
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	8e 0d       	add	r24, r14
 2f8:	26 df       	rcall	.-436    	; 0x146 <spi_writeWord>
	int currentAddress = numberCount;
	for(int i = 0; i < numberCount; i++)
 2fa:	1e 14       	cp	r1, r14
 2fc:	1f 04       	cpc	r1, r15
 2fe:	64 f4       	brge	.+24     	; 0x318 <writeLedDisplayB+0xba>
 300:	83 01       	movw	r16, r6
 302:	e6 0c       	add	r14, r6
 304:	f7 1c       	adc	r15, r7
	{
		spi_writeWord(currentAddress, num[i]);
 306:	f8 01       	movw	r30, r16
 308:	61 91       	ld	r22, Z+
 30a:	8f 01       	movw	r16, r30
 30c:	8d 2d       	mov	r24, r13
 30e:	1b df       	rcall	.-458    	; 0x146 <spi_writeWord>
 310:	da 94       	dec	r13
	
	for(int i = 4; i >= numberCount + 1; i--)
		spi_writeWord(i, 15);
	spi_writeWord(numberCount + 1, (value < 0) ? 10 : 15);
	int currentAddress = numberCount;
	for(int i = 0; i < numberCount; i++)
 312:	0e 15       	cp	r16, r14
 314:	1f 05       	cpc	r17, r15
 316:	b9 f7       	brne	.-18     	; 0x306 <writeLedDisplayB+0xa8>
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	9e be       	out	0x3e, r9	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	8d be       	out	0x3d, r8	; 61
 322:	05 c0       	rjmp	.+10     	; 0x32e <writeLedDisplayB+0xd0>

// Write value of a negative or positive value to display
void writeLedDisplayB(int value)
{
	if(value > 999 || value < -999)
		return;
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	be be       	out	0x3e, r11	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	ad be       	out	0x3d, r10	; 61
	for(int i = 0; i < numberCount; i++)
	{
		spi_writeWord(currentAddress, num[i]);
		currentAddress--;
	}
}
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	be be       	out	0x3e, r11	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	ad be       	out	0x3d, r10	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	7f 90       	pop	r7
 352:	6f 90       	pop	r6
 354:	08 95       	ret

00000356 <main>:

int main()
{
 356:	cf 93       	push	r28
	DDRB=0x01; // Set PB0 pin as output for display select
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	87 bb       	out	0x17, r24	; 23
	spi_masterInit(); // Initialize spi module
 35c:	b1 de       	rcall	.-670    	; 0xc0 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 35e:	d2 de       	rcall	.-604    	; 0x104 <displayDriverInit>
 360:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 362:	60 e0       	ldi	r22, 0x00	; 0
	spi_writeWord(i, 0);
 364:	8c 2f       	mov	r24, r28
 366:	ef de       	rcall	.-546    	; 0x146 <spi_writeWord>
 368:	cf 5f       	subi	r28, 0xFF	; 255
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 36a:	c5 30       	cpi	r28, 0x05	; 5
 36c:	d1 f7       	brne	.-12     	; 0x362 <main+0xc>
	spi_writeWord(i, 0);

	wait(1000);
 36e:	88 ee       	ldi	r24, 0xE8	; 232
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	95 de       	rcall	.-726    	; 0x9e <wait>
	writeLedDisplayA(8739);
 374:	83 e2       	ldi	r24, 0x23	; 35
 376:	92 e2       	ldi	r25, 0x22	; 34
 378:	09 df       	rcall	.-494    	; 0x18c <writeLedDisplayA>
	wait(2000);
 37a:	80 ed       	ldi	r24, 0xD0	; 208
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	8f de       	rcall	.-738    	; 0x9e <wait>
	writeLedDisplayA(245);
 380:	85 ef       	ldi	r24, 0xF5	; 245
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	03 df       	rcall	.-506    	; 0x18c <writeLedDisplayA>
	wait(2000);
 386:	80 ed       	ldi	r24, 0xD0	; 208
 388:	97 e0       	ldi	r25, 0x07	; 7
 38a:	89 de       	rcall	.-750    	; 0x9e <wait>
	writeLedDisplayA(25);
 38c:	89 e1       	ldi	r24, 0x19	; 25
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fd de       	rcall	.-518    	; 0x18c <writeLedDisplayA>
	wait(2000);
 392:	80 ed       	ldi	r24, 0xD0	; 208
 394:	97 e0       	ldi	r25, 0x07	; 7
 396:	83 de       	rcall	.-762    	; 0x9e <wait>
	writeLedDisplayA(4);
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	f7 de       	rcall	.-530    	; 0x18c <writeLedDisplayA>
	wait(2000);
 39e:	80 ed       	ldi	r24, 0xD0	; 208
 3a0:	97 e0       	ldi	r25, 0x07	; 7
 3a2:	7d de       	rcall	.-774    	; 0x9e <wait>
	writeLedDisplayB(-459);
 3a4:	85 e3       	ldi	r24, 0x35	; 53
 3a6:	9e ef       	ldi	r25, 0xFE	; 254
 3a8:	5a df       	rcall	.-332    	; 0x25e <writeLedDisplayB>
	wait(2000);
 3aa:	80 ed       	ldi	r24, 0xD0	; 208
 3ac:	97 e0       	ldi	r25, 0x07	; 7
 3ae:	77 de       	rcall	.-786    	; 0x9e <wait>
	writeLedDisplayB(-46);
 3b0:	82 ed       	ldi	r24, 0xD2	; 210
 3b2:	9f ef       	ldi	r25, 0xFF	; 255
 3b4:	54 df       	rcall	.-344    	; 0x25e <writeLedDisplayB>
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
	wait(2000);
 3b8:	97 e0       	ldi	r25, 0x07	; 7
 3ba:	71 de       	rcall	.-798    	; 0x9e <wait>
 3bc:	8b ef       	ldi	r24, 0xFB	; 251
 3be:	9f ef       	ldi	r25, 0xFF	; 255
	writeLedDisplayB(-5);
 3c0:	4e df       	rcall	.-356    	; 0x25e <writeLedDisplayB>
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	97 e0       	ldi	r25, 0x07	; 7
 3c6:	6b de       	rcall	.-810    	; 0x9e <wait>
	wait(2000);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <__divmodhi4>:
	return (1);
 3d0:	97 fb       	bst	r25, 7
 3d2:	07 2e       	mov	r0, r23
 3d4:	16 f4       	brtc	.+4      	; 0x3da <__divmodhi4+0xa>
 3d6:	00 94       	com	r0
 3d8:	06 d0       	rcall	.+12     	; 0x3e6 <__divmodhi4_neg1>
 3da:	77 fd       	sbrc	r23, 7
 3dc:	08 d0       	rcall	.+16     	; 0x3ee <__divmodhi4_neg2>
 3de:	0b d0       	rcall	.+22     	; 0x3f6 <__udivmodhi4>
 3e0:	07 fc       	sbrc	r0, 7
 3e2:	05 d0       	rcall	.+10     	; 0x3ee <__divmodhi4_neg2>
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__divmodhi4_exit>

000003e6 <__divmodhi4_neg1>:
 3e6:	90 95       	com	r25
 3e8:	81 95       	neg	r24
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__divmodhi4_neg2>:
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255

000003f4 <__divmodhi4_exit>:
 3f4:	08 95       	ret

000003f6 <__udivmodhi4>:
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	51 e1       	ldi	r21, 0x11	; 17
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__udivmodhi4_ep>

000003fe <__udivmodhi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a6 17       	cp	r26, r22
 404:	b7 07       	cpc	r27, r23
 406:	10 f0       	brcs	.+4      	; 0x40c <__udivmodhi4_ep>
 408:	a6 1b       	sub	r26, r22
 40a:	b7 0b       	sbc	r27, r23

0000040c <__udivmodhi4_ep>:
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	a9 f7       	brne	.-22     	; 0x3fe <__udivmodhi4_loop>
 414:	80 95       	com	r24
 416:	90 95       	com	r25
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	08 95       	ret

0000041e <itoa>:
 41e:	45 32       	cpi	r20, 0x25	; 37
 420:	51 05       	cpc	r21, r1
 422:	18 f4       	brcc	.+6      	; 0x42a <itoa+0xc>
 424:	42 30       	cpi	r20, 0x02	; 2
 426:	08 f0       	brcs	.+2      	; 0x42a <itoa+0xc>
 428:	04 c0       	rjmp	.+8      	; 0x432 <__itoa_ncheck>
 42a:	fb 01       	movw	r30, r22
 42c:	10 82       	st	Z, r1
 42e:	cb 01       	movw	r24, r22
 430:	08 95       	ret

00000432 <__itoa_ncheck>:
 432:	bb 27       	eor	r27, r27
 434:	4a 30       	cpi	r20, 0x0A	; 10
 436:	31 f4       	brne	.+12     	; 0x444 <__itoa_ncheck+0x12>
 438:	99 23       	and	r25, r25
 43a:	22 f4       	brpl	.+8      	; 0x444 <__itoa_ncheck+0x12>
 43c:	bd e2       	ldi	r27, 0x2D	; 45
 43e:	90 95       	com	r25
 440:	81 95       	neg	r24
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	01 c0       	rjmp	.+2      	; 0x448 <__utoa_common>

00000446 <__utoa_ncheck>:
 446:	bb 27       	eor	r27, r27

00000448 <__utoa_common>:
 448:	fb 01       	movw	r30, r22
 44a:	55 27       	eor	r21, r21
 44c:	aa 27       	eor	r26, r26
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	aa 1f       	adc	r26, r26
 454:	a4 17       	cp	r26, r20
 456:	10 f0       	brcs	.+4      	; 0x45c <__utoa_common+0x14>
 458:	a4 1b       	sub	r26, r20
 45a:	83 95       	inc	r24
 45c:	50 51       	subi	r21, 0x10	; 16
 45e:	b9 f7       	brne	.-18     	; 0x44e <__utoa_common+0x6>
 460:	a0 5d       	subi	r26, 0xD0	; 208
 462:	aa 33       	cpi	r26, 0x3A	; 58
 464:	08 f0       	brcs	.+2      	; 0x468 <__utoa_common+0x20>
 466:	a9 5d       	subi	r26, 0xD9	; 217
 468:	a1 93       	st	Z+, r26
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	79 f7       	brne	.-34     	; 0x44c <__utoa_common+0x4>
 46e:	b1 11       	cpse	r27, r1
 470:	b1 93       	st	Z+, r27
 472:	11 92       	st	Z+, r1
 474:	cb 01       	movw	r24, r22
 476:	00 c0       	rjmp	.+0      	; 0x478 <strrev>

00000478 <strrev>:
 478:	dc 01       	movw	r26, r24
 47a:	fc 01       	movw	r30, r24
 47c:	67 2f       	mov	r22, r23
 47e:	71 91       	ld	r23, Z+
 480:	77 23       	and	r23, r23
 482:	e1 f7       	brne	.-8      	; 0x47c <strrev+0x4>
 484:	32 97       	sbiw	r30, 0x02	; 2
 486:	04 c0       	rjmp	.+8      	; 0x490 <strrev+0x18>
 488:	7c 91       	ld	r23, X
 48a:	6d 93       	st	X+, r22
 48c:	70 83       	st	Z, r23
 48e:	62 91       	ld	r22, -Z
 490:	ae 17       	cp	r26, r30
 492:	bf 07       	cpc	r27, r31
 494:	c8 f3       	brcs	.-14     	; 0x488 <strrev+0x10>
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
