
Opdracht_B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096d  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000878  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000486  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006fa8  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c5  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000893d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  00008955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	4a c0       	rjmp	.+148    	; 0x130 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:

void wait(int ms);

void wait(int ms)
{
	for(int i = 0; i < ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
		_delay_ms(1);
	}
}

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2f 97       	sbiw	r28, 0x0f	; 15
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  d8:	81 bb       	out	0x11, r24	; 17
	
	LOOKUP pattern[] =
	{
		{PORTD, 0x00, 100}, {PORTD, 0x01,100}, {PORTD, 0x00, 0x00}
  da:	82 b3       	in	r24, 0x12	; 18
int main(void)
{
	DDRB = 0xFF;
	DDRD = 0xFF;
	
	LOOKUP pattern[] =
  dc:	1b 82       	std	Y+3, r1	; 0x03
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9d 83       	std	Y+5, r25	; 0x05
  e4:	8c 83       	std	Y+4, r24	; 0x04
	{
		{PORTD, 0x00, 100}, {PORTD, 0x01,100}, {PORTD, 0x00, 0x00}
  e6:	22 b3       	in	r18, 0x12	; 18
int main(void)
{
	DDRB = 0xFF;
	DDRD = 0xFF;
	
	LOOKUP pattern[] =
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	28 87       	std	Y+8, r18	; 0x08
  ec:	9a 87       	std	Y+10, r25	; 0x0a
  ee:	89 87       	std	Y+9, r24	; 0x09
	{
		{PORTD, 0x00, 100}, {PORTD, 0x01,100}, {PORTD, 0x00, 0x00}
  f0:	82 b3       	in	r24, 0x12	; 18
int main(void)
{
	DDRB = 0xFF;
	DDRD = 0xFF;
	
	LOOKUP pattern[] =
  f2:	1d 86       	std	Y+13, r1	; 0x0d
  f4:	1f 86       	std	Y+15, r1	; 0x0f
  f6:	1e 86       	std	Y+14, r1	; 0x0e
		volatile uint8_t* port = 0x03;

		while(pattern[index].delay != 0) 
		{
			//*pattern[index].port = pattern[index].data;
			*port = pattern[index].data;
  f8:	0f 2e       	mov	r0, r31
  fa:	f3 e0       	ldi	r31, 0x03	; 3
  fc:	ef 2e       	mov	r14, r31
  fe:	f1 2c       	mov	r15, r1
 100:	f0 2d       	mov	r31, r0
	while(1)
	{
		int index = 0;
		volatile uint8_t* port = 0x03;

		while(pattern[index].delay != 0) 
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	9d 81       	ldd	r25, Y+5	; 0x05
 106:	89 2b       	or	r24, r25
 108:	e1 f3       	breq	.-8      	; 0x102 <main+0x42>
 10a:	8e 01       	movw	r16, r28
 10c:	0f 5f       	subi	r16, 0xFF	; 255
 10e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			//*pattern[index].port = pattern[index].data;
			*port = pattern[index].data;
 110:	f8 01       	movw	r30, r16
 112:	82 81       	ldd	r24, Z+2	; 0x02
 114:	f7 01       	movw	r30, r14
 116:	80 83       	st	Z, r24
			
			wait(pattern[index].delay);
 118:	f8 01       	movw	r30, r16
 11a:	83 81       	ldd	r24, Z+3	; 0x03
 11c:	94 81       	ldd	r25, Z+4	; 0x04
 11e:	bf df       	rcall	.-130    	; 0x9e <wait>
 120:	0b 5f       	subi	r16, 0xFB	; 251
 122:	1f 4f       	sbci	r17, 0xFF	; 255
	while(1)
	{
		int index = 0;
		volatile uint8_t* port = 0x03;

		while(pattern[index].delay != 0) 
 124:	f8 01       	movw	r30, r16
 126:	83 81       	ldd	r24, Z+3	; 0x03
 128:	94 81       	ldd	r25, Z+4	; 0x04
 12a:	89 2b       	or	r24, r25
 12c:	89 f7       	brne	.-30     	; 0x110 <main+0x50>
 12e:	e9 cf       	rjmp	.-46     	; 0x102 <main+0x42>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
