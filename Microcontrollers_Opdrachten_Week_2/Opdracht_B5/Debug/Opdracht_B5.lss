
Opdracht_B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001ca  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b11  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000894  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000449  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e6  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6b d0       	rcall	.+214    	; 0x18a <main>
  b4:	88 c0       	rjmp	.+272    	; 0x1c6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
void write_data(unsigned char byte);
void display_text(char *str);

void lcd_strobe_lcd_e(void)
{
	PORTC |= (1<<LCD_E);	// E high
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init>:
	_delay_ms(1);			// nodig?
}

void init(void)
{
  d6:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  dc:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  e8:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
  ea:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  ee:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  f2:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
  f4:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x60;
  f8:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
  fc:	80 e6       	ldi	r24, 0x60	; 96

	//// Clear screen
	PORTC = 0x00;
  fe:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>
 102:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x01;
 104:	d9 df       	rcall	.-78     	; 0xb8 <lcd_strobe_lcd_e>
 106:	81 e0       	ldi	r24, 0x01	; 1
	lcd_strobe_lcd_e();
 108:	85 bb       	out	0x15, r24	; 21
 10a:	d6 df       	rcall	.-84     	; 0xb8 <lcd_strobe_lcd_e>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <write_command>:
		write_command(0x1E);
	//write_command(128 + position);
}

void write_command(unsigned char byte)
{
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
	PORTC = byte;
 114:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 116:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 11a:	c2 95       	swap	r28
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
 120:	aa 98       	cbi	0x15, 2	; 21
 122:	ca df       	rcall	.-108    	; 0xb8 <lcd_strobe_lcd_e>
}
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <set_cursor>:
	PORTC = 0x01;
	lcd_strobe_lcd_e();
}

void set_cursor(int position)
{
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
	write_command(0x02);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	ed df       	rcall	.-38     	; 0x110 <write_command>
	for(int i = 0; i < position; i++)
 136:	10 16       	cp	r1, r16
 138:	11 06       	cpc	r1, r17
 13a:	44 f4       	brge	.+16     	; 0x14c <set_cursor+0x24>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
		write_command(0x1E);
 140:	8e e1       	ldi	r24, 0x1E	; 30
 142:	e6 df       	rcall	.-52     	; 0x110 <write_command>
}

void set_cursor(int position)
{
	write_command(0x02);
	for(int i = 0; i < position; i++)
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	0c 17       	cp	r16, r28
 148:	1d 07       	cpc	r17, r29
 14a:	d1 f7       	brne	.-12     	; 0x140 <set_cursor+0x18>
		write_command(0x1E);
	//write_command(128 + position);
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <write_data>:
	lcd_strobe_lcd_e();
}


void write_data(unsigned char byte)
{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	PORTC = byte;
 15a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 15c:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 15e:	ac df       	rcall	.-168    	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 160:	c2 95       	swap	r28
 162:	c0 7f       	andi	r28, 0xF0	; 240
 164:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 166:	aa 9a       	sbi	0x15, 2	; 21
 168:	a7 df       	rcall	.-178    	; 0xb8 <lcd_strobe_lcd_e>
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <display_text>:


void display_text(char *str)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	for(;*str; str++){
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	29 f0       	breq	.+10     	; 0x184 <display_text+0x16>
 17a:	21 96       	adiw	r28, 0x01	; 1
		write_data(*str);
 17c:	ec df       	rcall	.-40     	; 0x156 <write_data>
}


void display_text(char *str)
{
	for(;*str; str++){
 17e:	89 91       	ld	r24, Y+
 180:	81 11       	cpse	r24, r1
 182:	fc cf       	rjmp	.-8      	; 0x17c <display_text+0xe>
		write_data(*str);
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:

void main()
{
	DDRD = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 bb       	out	0x11, r24	; 17
	init();
 18e:	a3 df       	rcall	.-186    	; 0xd6 <init>
	display_text("Hello world!");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	ec df       	rcall	.-40     	; 0x16e <display_text>
	set_cursor(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	c6 df       	rcall	.-116    	; 0x128 <set_cursor>
		write_data(*str);
	}
}

void main()
{
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	89 e6       	ldi	r24, 0x69	; 105
 1a4:	98 e1       	ldi	r25, 0x18	; 24
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x1c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x26>
	
	while (1)
	{
		//write_command(0x1E);
		_delay_ms(1000);
		count++;
 1b0:	00 00       	nop
		set_cursor(count);
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	ce 01       	movw	r24, r28
 1b6:	b8 df       	rcall	.-144    	; 0x128 <set_cursor>
		if(count == 5)
 1b8:	c5 30       	cpi	r28, 0x05	; 5
 1ba:	d1 05       	cpc	r29, r1
		{
			count = 0;
			set_cursor(0);
 1bc:	89 f7       	brne	.-30     	; 0x1a0 <main+0x16>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	b2 df       	rcall	.-156    	; 0x128 <set_cursor>
 1c4:	eb cf       	rjmp	.-42     	; 0x19c <main+0x12>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
