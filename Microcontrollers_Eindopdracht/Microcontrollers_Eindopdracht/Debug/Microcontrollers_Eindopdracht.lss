
Microcontrollers_Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff3  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9a  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070b  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000611  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e8  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	fd d0       	rcall	.+506    	; 0x2ae <main>
  b4:	31 c1       	rjmp	.+610    	; 0x318 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <i2c_init>:
#include "i2c.h"

void i2c_init()
{
    TWSR = 0x00; //set presca1er bits to zero
  b8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    //TWBR = 0x46; //SCL frequency is 50K for 16Mhz
	TWBR = 0x0C;
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    TWCR = 0x04; //enab1e TWI module (Set TWEN bit)
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  c8:	08 95       	ret

000000ca <i2c_start>:
	//TWCR = (1<<TWEN);
}

void i2c_start()
{
    TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
  ca:	84 ea       	ldi	r24, 0xA4	; 164
  cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    while (!(TWCR & (1<<TWINT)));
  d0:	e4 e7       	ldi	r30, 0x74	; 116
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	ec f7       	brge	.-6      	; 0xd4 <i2c_start+0xa>
}
  da:	08 95       	ret

000000dc <i2c_stop>:

void i2c_stop(void)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
  dc:	84 e9       	ldi	r24, 0x94	; 148
  de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	81 e2       	ldi	r24, 0x21	; 33
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <i2c_stop+0x8>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <i2c_write>:
    _delay_us(100); //wait for a short time
}

void i2c_write(uint8_t data)
{
    TWDR = data;
  ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    TWCR = ((1<< TWINT) | (1<<TWEN));
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    while (!(TWCR & (1 <<TWINT)));
  f6:	e4 e7       	ldi	r30, 0x74	; 116
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <i2c_write+0xe>
}
 100:	08 95       	ret

00000102 <i2c_read>:

uint8_t i2c_read(uint8_t ackOption)
{
	if(ackOption == ACK_VAL)
 102:	81 11       	cpse	r24, r1
 104:	06 c0       	rjmp	.+12     	; 0x112 <i2c_read+0x10>
		TWCR = ((1 << TWINT) | (1 <<TWEN) | (1 << TWEA));
 106:	84 ec       	ldi	r24, 0xC4	; 196
 108:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	else if(ackOption == NACK_VAL)
		TWCR = ((1 << TWINT) | (1 <<TWEN));
    //TWCR = ((1<< TWINT) | (1<<TWEN) | (ackOption << TWEA));
    while ( !(TWCR & (1 <<TWINT)));
 10c:	e4 e7       	ldi	r30, 0x74	; 116
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	06 c0       	rjmp	.+12     	; 0x11e <i2c_read+0x1c>

uint8_t i2c_read(uint8_t ackOption)
{
	if(ackOption == ACK_VAL)
		TWCR = ((1 << TWINT) | (1 <<TWEN) | (1 << TWEA));
	else if(ackOption == NACK_VAL)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	d9 f7       	brne	.-10     	; 0x10c <i2c_read+0xa>
		TWCR = ((1 << TWINT) | (1 <<TWEN));
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <i2c_read+0xa>
    //TWCR = ((1<< TWINT) | (1<<TWEN) | (ackOption << TWEA));
    while ( !(TWCR & (1 <<TWINT)));
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <i2c_read+0x1c>
    return TWDR;
 124:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
 128:	08 95       	ret

0000012a <i2c_write_register>:

void i2c_write_register(uint8_t addr, uint8_t reg, uint8_t data)
{
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	18 2f       	mov	r17, r24
 132:	d6 2f       	mov	r29, r22
 134:	c4 2f       	mov	r28, r20
	i2c_start();
 136:	c9 df       	rcall	.-110    	; 0xca <i2c_start>
	i2c_write((addr << 1) | WRITE_BIT);
 138:	81 2f       	mov	r24, r17
 13a:	88 0f       	add	r24, r24
 13c:	d7 df       	rcall	.-82     	; 0xec <i2c_write>
	i2c_write(reg);
 13e:	8d 2f       	mov	r24, r29
 140:	d5 df       	rcall	.-86     	; 0xec <i2c_write>
	i2c_write(data);
 142:	8c 2f       	mov	r24, r28
 144:	d3 df       	rcall	.-90     	; 0xec <i2c_write>
 146:	ca df       	rcall	.-108    	; 0xdc <i2c_stop>
	i2c_stop();
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
}
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <i2c_read_register>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29

uint8_t i2c_read_register(uint8_t addr, uint8_t reg)
{
 154:	c8 2f       	mov	r28, r24
 156:	d6 2f       	mov	r29, r22
	i2c_start();
 158:	b8 df       	rcall	.-144    	; 0xca <i2c_start>
	i2c_write((addr << 1) | WRITE_BIT);
 15a:	8c 2f       	mov	r24, r28
 15c:	88 0f       	add	r24, r24
 15e:	c6 df       	rcall	.-116    	; 0xec <i2c_write>
	i2c_write(reg);
 160:	8d 2f       	mov	r24, r29
	i2c_stop();
 162:	c4 df       	rcall	.-120    	; 0xec <i2c_write>
 164:	bb df       	rcall	.-138    	; 0xdc <i2c_stop>
	
	i2c_start();
 166:	b1 df       	rcall	.-158    	; 0xca <i2c_start>
	i2c_write((addr << 1) | READ_BIT);
 168:	8c 2f       	mov	r24, r28
 16a:	88 0f       	add	r24, r24
 16c:	81 60       	ori	r24, 0x01	; 1
	uint8_t data = i2c_read(NACK_VAL);
 16e:	be df       	rcall	.-132    	; 0xec <i2c_write>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	c7 df       	rcall	.-114    	; 0x102 <i2c_read>
 174:	c8 2f       	mov	r28, r24
	i2c_stop();
 176:	b2 df       	rcall	.-156    	; 0xdc <i2c_stop>
 178:	8c 2f       	mov	r24, r28
	
	return data;
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <matrix_display_init>:
 180:	cf 93       	push	r28
#include "matrix_display.h"

// Initializes the matrix display given to the function
void matrix_display_init(matrix_display* matrixDisplay)
{
 182:	df 93       	push	r29
	// If matrix was not initialized, initialize it
	if(!matrixDisplay->isInitialized)
 184:	fc 01       	movw	r30, r24
 186:	21 81       	ldd	r18, Z+1	; 0x01
 188:	21 11       	cpse	r18, r1
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <matrix_display_init+0x2a>
 18c:	ec 01       	movw	r28, r24
	{
		// System setup command
		i2c_write_register(matrixDisplay->addr, 0x21, 0x00);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	61 e2       	ldi	r22, 0x21	; 33
 192:	80 81       	ld	r24, Z
 194:	ca df       	rcall	.-108    	; 0x12a <i2c_write_register>
		// Turn on display with no blinking
		i2c_write_register(matrixDisplay->addr, 0x81, 0x00);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	61 e8       	ldi	r22, 0x81	; 129
 19a:	88 81       	ld	r24, Y
 19c:	c6 df       	rcall	.-116    	; 0x12a <i2c_write_register>
		// Set the matrix to full brightness
		i2c_write_register(matrixDisplay->addr, 0xE7, 0xFF);
 19e:	4f ef       	ldi	r20, 0xFF	; 255
 1a0:	67 ee       	ldi	r22, 0xE7	; 231
 1a2:	88 81       	ld	r24, Y
 1a4:	c2 df       	rcall	.-124    	; 0x12a <i2c_write_register>
		matrixDisplay->isInitialized = true;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	89 83       	std	Y+1, r24	; 0x01
	}	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <matrix_display_set_pixel>:

// Sets the value (on/off : 1/0) of a pixel on the matrix display given to the function at a certain x and y position
void matrix_display_set_pixel(matrix_display* matrixDisplay, uint8_t x, uint8_t y, bool isOn)
{
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	16 2f       	mov	r17, r22
 1be:	04 2f       	mov	r16, r20
 1c0:	f2 2e       	mov	r15, r18
	// If matrix was not initialized, initialize it before writing to it
	if(!matrixDisplay->isInitialized)
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	81 11       	cpse	r24, r1
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <matrix_display_set_pixel+0x1c>
		matrix_display_init(matrixDisplay);
 1c8:	ce 01       	movw	r24, r28
 1ca:	da df       	rcall	.-76     	; 0x180 <matrix_display_init>
	
	// LED matrix is 8x8 so x or y values above 7 are not allowed (values are indexed from 0 to 7)
	if(x > 7 || y > 7)
 1cc:	18 30       	cpi	r17, 0x08	; 8
 1ce:	f8 f4       	brcc	.+62     	; 0x20e <matrix_display_set_pixel+0x5e>
 1d0:	08 30       	cpi	r16, 0x08	; 8
 1d2:	e8 f4       	brcc	.+58     	; 0x20e <matrix_display_set_pixel+0x5e>
		return;
	
	// Read data of the row specified by y, on the matrix display
	uint8_t rowData = i2c_read_register(matrixDisplay->addr, y * 2);
 1d4:	00 0f       	add	r16, r16
 1d6:	60 2f       	mov	r22, r16
 1d8:	88 81       	ld	r24, Y
 1da:	ba df       	rcall	.-140    	; 0x150 <i2c_read_register>
		First LED column for some reason is the last bit (0b10000000 : 0x80), so the value written 
		must be shifted one less to the left if the x value is higher than 0 and must be (0b10000000 : 0x80) otherwise
	*/
	//i2c_write_register(matrixDisplay->addr, y * 2, (isOn) ? ((x == 0) ? (0x80) : (1 << (x - 1))) : 0x00);
	uint8_t data;
	if(isOn)
 1dc:	ff 20       	and	r15, r15
 1de:	51 f0       	breq	.+20     	; 0x1f4 <matrix_display_set_pixel+0x44>
		data = ((x == 0) ? 0x80 : (1 << (x - 1)));
 1e0:	11 23       	and	r17, r17
 1e2:	81 f0       	breq	.+32     	; 0x204 <matrix_display_set_pixel+0x54>
 1e4:	11 50       	subi	r17, 0x01	; 1
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <matrix_display_set_pixel+0x3c>
 1ea:	99 0f       	add	r25, r25
 1ec:	1a 95       	dec	r17
 1ee:	ea f7       	brpl	.-6      	; 0x1ea <matrix_display_set_pixel+0x3a>
 1f0:	49 2f       	mov	r20, r25
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <matrix_display_set_pixel+0x56>
	else
		data = (1 << (x - 1));
 1f4:	11 50       	subi	r17, 0x01	; 1
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <matrix_display_set_pixel+0x4c>
 1fa:	99 0f       	add	r25, r25
 1fc:	1a 95       	dec	r17
 1fe:	ea f7       	brpl	.-6      	; 0x1fa <matrix_display_set_pixel+0x4a>
 200:	49 2f       	mov	r20, r25
 202:	01 c0       	rjmp	.+2      	; 0x206 <matrix_display_set_pixel+0x56>
		must be shifted one less to the left if the x value is higher than 0 and must be (0b10000000 : 0x80) otherwise
	*/
	//i2c_write_register(matrixDisplay->addr, y * 2, (isOn) ? ((x == 0) ? (0x80) : (1 << (x - 1))) : 0x00);
	uint8_t data;
	if(isOn)
		data = ((x == 0) ? 0x80 : (1 << (x - 1)));
 204:	40 e8       	ldi	r20, 0x80	; 128
	else
		data = (1 << (x - 1));
	i2c_write_register(matrixDisplay->addr, y * 2, data | rowData);
 206:	48 2b       	or	r20, r24
 208:	60 2f       	mov	r22, r16
 20a:	88 81       	ld	r24, Y
 20c:	8e df       	rcall	.-228    	; 0x12a <i2c_write_register>
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	08 95       	ret

0000021a <matrix_display_set_pixels>:

// Sets the values (on/off : 1/0) of multiple pixels on the matrix display given to the function
void matrix_display_set_pixels(matrix_display* matrixDisplay, matrix_display_value_pair* pixelValues, uint8_t size)
{
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	7c 01       	movw	r14, r24
 22c:	6b 01       	movw	r12, r22
 22e:	14 2f       	mov	r17, r20
	// If matrix was not initialized, initialize it before writing to it
	if(!matrixDisplay->isInitialized)
 230:	fc 01       	movw	r30, r24
 232:	81 81       	ldd	r24, Z+1	; 0x01
 234:	81 11       	cpse	r24, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <matrix_display_set_pixels+0x22>
		matrix_display_init(matrixDisplay);
 238:	c7 01       	movw	r24, r14
 23a:	a2 df       	rcall	.-188    	; 0x180 <matrix_display_init>
	
	// Loop trough all pixels values pairs given and set corresponding LED values on the matrix display
	for(int i = 0; i < size; i++)
 23c:	11 23       	and	r17, r17
 23e:	a1 f0       	breq	.+40     	; 0x268 <matrix_display_set_pixels+0x4e>
 240:	e6 01       	movw	r28, r12
 242:	41 2f       	mov	r20, r17
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	8a 01       	movw	r16, r20
 248:	00 0f       	add	r16, r16
 24a:	11 1f       	adc	r17, r17
 24c:	40 0f       	add	r20, r16
 24e:	51 1f       	adc	r21, r17
 250:	86 01       	movw	r16, r12
 252:	04 0f       	add	r16, r20
 254:	15 1f       	adc	r17, r21
		matrix_display_set_pixel(matrixDisplay, pixelValues[i].x, pixelValues[i].y, pixelValues[i].isOn);
 256:	2a 81       	ldd	r18, Y+2	; 0x02
 258:	49 81       	ldd	r20, Y+1	; 0x01
 25a:	68 81       	ld	r22, Y
 25c:	c7 01       	movw	r24, r14
 25e:	a8 df       	rcall	.-176    	; 0x1b0 <matrix_display_set_pixel>
 260:	23 96       	adiw	r28, 0x03	; 3
	// If matrix was not initialized, initialize it before writing to it
	if(!matrixDisplay->isInitialized)
		matrix_display_init(matrixDisplay);
	
	// Loop trough all pixels values pairs given and set corresponding LED values on the matrix display
	for(int i = 0; i < size; i++)
 262:	c0 17       	cp	r28, r16
 264:	d1 07       	cpc	r29, r17
 266:	b9 f7       	brne	.-18     	; 0x256 <matrix_display_set_pixels+0x3c>
		matrix_display_set_pixel(matrixDisplay, pixelValues[i].x, pixelValues[i].y, pixelValues[i].isOn);
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	08 95       	ret

0000027a <matrix_display_clear>:

// Sets the values of all the pixels of the matrix display given to the function to (off : 0) essentially clear the matrix display
void matrix_display_clear(matrix_display* matrixDisplay)
{
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	8c 01       	movw	r16, r24
	// If matrix was not initialized, initialize it before writing to it
	if(!matrixDisplay->isInitialized)
 282:	fc 01       	movw	r30, r24
 284:	81 81       	ldd	r24, Z+1	; 0x01
 286:	81 11       	cpse	r24, r1
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <matrix_display_clear+0x28>
		matrix_display_init(matrixDisplay);
 28a:	c8 01       	movw	r24, r16
 28c:	79 df       	rcall	.-270    	; 0x180 <matrix_display_init>
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <matrix_display_clear+0x28>
	
	// Loop trough all rows of the matrix and turn off the corresponding LED's
	for(int i = 0; i < 8; i++)
		i2c_write_register(matrixDisplay->addr, i * 2, 0x00);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	6c 2f       	mov	r22, r28
 294:	f8 01       	movw	r30, r16
 296:	80 81       	ld	r24, Z
 298:	48 df       	rcall	.-368    	; 0x12a <i2c_write_register>
 29a:	ce 5f       	subi	r28, 0xFE	; 254
	// If matrix was not initialized, initialize it before writing to it
	if(!matrixDisplay->isInitialized)
		matrix_display_init(matrixDisplay);
	
	// Loop trough all rows of the matrix and turn off the corresponding LED's
	for(int i = 0; i < 8; i++)
 29c:	c0 31       	cpi	r28, 0x10	; 16
 29e:	c1 f7       	brne	.-16     	; 0x290 <matrix_display_clear+0x16>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <matrix_display_clear+0x2c>
		matrix_display_set_pixel(matrixDisplay, pixelValues[i].x, pixelValues[i].y, pixelValues[i].isOn);
}

// Sets the values of all the pixels of the matrix display given to the function to (off : 0) essentially clear the matrix display
void matrix_display_clear(matrix_display* matrixDisplay)
{
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	f5 cf       	rjmp	.-22     	; 0x290 <matrix_display_clear+0x16>
		matrix_display_init(matrixDisplay);
	
	// Loop trough all rows of the matrix and turn off the corresponding LED's
	for(int i = 0; i < 8; i++)
		i2c_write_register(matrixDisplay->addr, i * 2, 0x00);
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <main>:
#include <avr/io.h>
#include "Components/i2c/i2c.h"
#include "Components/matrix_display/matrix_display.h"

int main(void)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	ae 97       	sbiw	r28, 0x2e	; 46
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
	i2c_init();
 2c2:	fa de       	rcall	.-524    	; 0xb8 <i2c_init>
	matrix_display matrixDisplay1 = {
 2c4:	80 e7       	ldi	r24, 0x70	; 112
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	1a 82       	std	Y+2, r1	; 0x02
		.addr = 0x70,
		.isInitialized = false,
	};
	matrix_display matrixDisplay2 = {
 2ca:	81 e7       	ldi	r24, 0x71	; 113
 2cc:	8b 83       	std	Y+3, r24	; 0x03
 2ce:	1c 82       	std	Y+4, r1	; 0x04
	
	//for(int y = 0; y < 8; y++)
		//for(int x = 0; x < 8; x++)
			//matrix_display_set_pixel(&matrixDisplay, x, y, true);
	
	matrix_display_init(&matrixDisplay1);
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	55 df       	rcall	.-342    	; 0x180 <matrix_display_init>
	matrix_display_init(&matrixDisplay2);
 2d6:	ce 01       	movw	r24, r28
 2d8:	03 96       	adiw	r24, 0x03	; 3
 2da:	52 df       	rcall	.-348    	; 0x180 <matrix_display_init>
	matrix_display_clear(&matrixDisplay1);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	cc df       	rcall	.-104    	; 0x27a <matrix_display_clear>
	matrix_display_clear(&matrixDisplay2);
 2e2:	ce 01       	movw	r24, r28
 2e4:	03 96       	adiw	r24, 0x03	; 3
 2e6:	c9 df       	rcall	.-110    	; 0x27a <matrix_display_clear>
 2e8:	8a e2       	ldi	r24, 0x2A	; 42
	
	//matrix_display_set_pixel(&matrixDisplay1, 0, 0, true);
	//matrix_display_set_pixel(&matrixDisplay2, 0, 0, true);
	
	matrix_display_value_pair pixelValues[] = {
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	de 01       	movw	r26, r28
 2f0:	15 96       	adiw	r26, 0x05	; 5
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x44>
 2fa:	4e e0       	ldi	r20, 0x0E	; 14
		{ 4, 6, true },
		{ 5, 6, true },
		{ 6, 5, true },
	};
	
	matrix_display_set_pixels(&matrixDisplay1, pixelValues, sizeof(pixelValues) / sizeof(matrix_display_value_pair));
 2fc:	be 01       	movw	r22, r28
 2fe:	6b 5f       	subi	r22, 0xFB	; 251
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	89 df       	rcall	.-238    	; 0x21a <matrix_display_set_pixels>
 308:	4e e0       	ldi	r20, 0x0E	; 14
	matrix_display_set_pixels(&matrixDisplay2, pixelValues, sizeof(pixelValues) / sizeof(matrix_display_value_pair));
 30a:	be 01       	movw	r22, r28
 30c:	6b 5f       	subi	r22, 0xFB	; 251
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	ce 01       	movw	r24, r28
 312:	03 96       	adiw	r24, 0x03	; 3
 314:	82 df       	rcall	.-252    	; 0x21a <matrix_display_set_pixels>
 316:	ff cf       	rjmp	.-2      	; 0x316 <main+0x68>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
