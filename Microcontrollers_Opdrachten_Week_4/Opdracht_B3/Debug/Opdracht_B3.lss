
Opdracht_B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcb  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000922  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048f  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a3  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b6  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6a d0       	rcall	.+212    	; 0x188 <main>
  b4:	ce c0       	rjmp	.+412    	; 0x252 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
	lcd_strobe_lcd_e();
}

void set_cursor(int position)
{
	write_command(128 + position);
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init>:
  d6:	cf 93       	push	r28
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	15 ba       	out	0x15, r1	; 21
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	85 bb       	out	0x15, r24	; 21
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>
 102:	15 ba       	out	0x15, r1	; 21
 104:	d9 df       	rcall	.-78     	; 0xb8 <lcd_strobe_lcd_e>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	85 bb       	out	0x15, r24	; 21
 10a:	d6 df       	rcall	.-84     	; 0xb8 <lcd_strobe_lcd_e>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <write_command>:
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
 114:	85 bb       	out	0x15, r24	; 21
 116:	aa 98       	cbi	0x15, 2	; 21
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>
 11a:	c2 95       	swap	r28
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	c5 bb       	out	0x15, r28	; 21
 120:	aa 98       	cbi	0x15, 2	; 21
 122:	ca df       	rcall	.-108    	; 0xb8 <lcd_strobe_lcd_e>
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <write_data>:
	lcd_strobe_lcd_e();
}


void write_data(unsigned char byte)
{
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
	PORTC = byte;
 12c:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 12e:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 130:	c3 df       	rcall	.-122    	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 132:	c2 95       	swap	r28
 134:	c0 7f       	andi	r28, 0xF0	; 240
 136:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 138:	aa 9a       	sbi	0x15, 2	; 21
 13a:	be df       	rcall	.-132    	; 0xb8 <lcd_strobe_lcd_e>
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <display_text>:


void display_text(char *str)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	for(;*str; str++){
 146:	88 81       	ld	r24, Y
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <display_text+0x16>
 14c:	21 96       	adiw	r28, 0x01	; 1
		write_data(*str);
 14e:	ec df       	rcall	.-40     	; 0x128 <write_data>
}


void display_text(char *str)
{
	for(;*str; str++){
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fc cf       	rjmp	.-8      	; 0x14e <display_text+0xe>
		write_data(*str);
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 15c:	18 16       	cp	r1, r24
 15e:	19 06       	cpc	r1, r25
 160:	6c f4       	brge	.+26     	; 0x17c <wait+0x20>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	e9 ef       	ldi	r30, 0xF9	; 249
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <wait+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <wait+0x14>
 170:	00 00       	nop
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	82 17       	cp	r24, r18
 178:	93 07       	cpc	r25, r19
 17a:	a9 f7       	brne	.-22     	; 0x166 <wait+0xa>
 17c:	08 95       	ret

0000017e <adcInit>:


// Initialize ADC:
void adcInit( void )
{
	ADMUX = 0b11100000;			// AREF=2.56, result left adjusted, channel1 at pin PF0
 17e:	80 ee       	ldi	r24, 0xE0	; 224
 180:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
 182:	86 ee       	ldi	r24, 0xE6	; 230
 184:	86 b9       	out	0x06, r24	; 6
 186:	08 95       	ret

00000188 <main>:
}


// Main program: ADC at PF1
int main( void )
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2a 97       	sbiw	r28, 0x0a	; 10
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
	DDRF = 0x00;				// set PORTF for input (ADC)
 19c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;	
 1a4:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;			// set PORTB for output
 1a6:	81 bb       	out	0x11, r24	; 17
	adcInit();	
 1a8:	ea df       	rcall	.-44     	; 0x17e <adcInit>
	init();				// initialize ADC		
 1aa:	95 df       	rcall	.-214    	; 0xd6 <init>
 1ac:	84 b1       	in	r24, 0x04	; 4

	while (1)
	{
		PORTB = ADCL;			// Show MSB/LSB (bit 10:0) of ADC
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	85 b1       	in	r24, 0x05	; 5
		PORTA = ADCH;
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	84 e6       	ldi	r24, 0x64	; 100
		wait(100);				// every 100 ms (busy waiting)
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	d1 df       	rcall	.-94     	; 0x15c <wait>
	lcd_strobe_lcd_e();
}

void set_cursor(int position)
{
	write_command(128 + position);
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	a9 df       	rcall	.-174    	; 0x110 <write_command>
		PORTB = ADCL;			// Show MSB/LSB (bit 10:0) of ADC
		PORTA = ADCH;
		wait(100);				// every 100 ms (busy waiting)
		
		set_cursor(0);
		display_text("");
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	be df       	rcall	.-132    	; 0x140 <display_text>
 1c4:	8b b3       	in	r24, 0x1b	; 27
		char snum[10]; 
		display_text(itoa(PORTA, snum, 10));
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 d0       	rcall	.+4      	; 0x1d8 <itoa>
 1d4:	b5 df       	rcall	.-150    	; 0x140 <display_text>
 1d6:	ea cf       	rjmp	.-44     	; 0x1ac <main+0x24>

000001d8 <itoa>:
 1d8:	45 32       	cpi	r20, 0x25	; 37
 1da:	51 05       	cpc	r21, r1
 1dc:	18 f4       	brcc	.+6      	; 0x1e4 <itoa+0xc>
 1de:	42 30       	cpi	r20, 0x02	; 2
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <itoa+0xc>
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <__itoa_ncheck>
 1e4:	fb 01       	movw	r30, r22
 1e6:	10 82       	st	Z, r1
 1e8:	cb 01       	movw	r24, r22
 1ea:	08 95       	ret

000001ec <__itoa_ncheck>:
 1ec:	bb 27       	eor	r27, r27
 1ee:	4a 30       	cpi	r20, 0x0A	; 10
 1f0:	31 f4       	brne	.+12     	; 0x1fe <__itoa_ncheck+0x12>
 1f2:	99 23       	and	r25, r25
 1f4:	22 f4       	brpl	.+8      	; 0x1fe <__itoa_ncheck+0x12>
 1f6:	bd e2       	ldi	r27, 0x2D	; 45
 1f8:	90 95       	com	r25
 1fa:	81 95       	neg	r24
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <__utoa_common>

00000200 <__utoa_ncheck>:
 200:	bb 27       	eor	r27, r27

00000202 <__utoa_common>:
 202:	fb 01       	movw	r30, r22
 204:	55 27       	eor	r21, r21
 206:	aa 27       	eor	r26, r26
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	aa 1f       	adc	r26, r26
 20e:	a4 17       	cp	r26, r20
 210:	10 f0       	brcs	.+4      	; 0x216 <__utoa_common+0x14>
 212:	a4 1b       	sub	r26, r20
 214:	83 95       	inc	r24
 216:	50 51       	subi	r21, 0x10	; 16
 218:	b9 f7       	brne	.-18     	; 0x208 <__utoa_common+0x6>
 21a:	a0 5d       	subi	r26, 0xD0	; 208
 21c:	aa 33       	cpi	r26, 0x3A	; 58
 21e:	08 f0       	brcs	.+2      	; 0x222 <__utoa_common+0x20>
 220:	a9 5d       	subi	r26, 0xD9	; 217
 222:	a1 93       	st	Z+, r26
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	79 f7       	brne	.-34     	; 0x206 <__utoa_common+0x4>
 228:	b1 11       	cpse	r27, r1
 22a:	b1 93       	st	Z+, r27
 22c:	11 92       	st	Z+, r1
 22e:	cb 01       	movw	r24, r22
 230:	00 c0       	rjmp	.+0      	; 0x232 <strrev>

00000232 <strrev>:
 232:	dc 01       	movw	r26, r24
 234:	fc 01       	movw	r30, r24
 236:	67 2f       	mov	r22, r23
 238:	71 91       	ld	r23, Z+
 23a:	77 23       	and	r23, r23
 23c:	e1 f7       	brne	.-8      	; 0x236 <strrev+0x4>
 23e:	32 97       	sbiw	r30, 0x02	; 2
 240:	04 c0       	rjmp	.+8      	; 0x24a <strrev+0x18>
 242:	7c 91       	ld	r23, X
 244:	6d 93       	st	X+, r22
 246:	70 83       	st	Z, r23
 248:	62 91       	ld	r22, -Z
 24a:	ae 17       	cp	r26, r30
 24c:	bf 07       	cpc	r27, r31
 24e:	c8 f3       	brcs	.-14     	; 0x242 <strrev+0x10>
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
